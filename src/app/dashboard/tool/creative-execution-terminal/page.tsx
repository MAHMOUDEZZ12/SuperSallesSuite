
'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Loader2, Sparkles, Circle, CheckCircle, Play, FileText, ClipboardPaste } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { PageHeader } from '@/components/ui/page-header';
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/utils';
import { track } from '@/lib/events';

type Status = 'pending' | 'running' | 'completed' | 'error';

interface Step {
  description: string;
  tool: string;
  parameters: any;
  status: Status;
}

export default function CreativeExecutionTerminalPage() {
  const { toast } = useToast();
  const [isExecuting, setIsExecuting] = useState(false);
  const [workflow, setWorkflow] = useState<Step[]>([]);
  const [pastedPlan, setPastedPlan] = useState('');

  const handleRunWorkflow = () => {
    let parsedPlan;
    try {
      parsedPlan = JSON.parse(pastedPlan);
      if (!Array.isArray(parsedPlan) || parsedPlan.length === 0) {
        throw new Error("Plan must be a non-empty array.");
      }
    } catch (e) {
      toast({ title: 'Invalid Plan', description: 'The pasted text is not a valid JSON execution plan. Please generate one from a compatible tool.', variant: 'destructive' });
      return;
    }

    const initialWorkflow: Step[] = parsedPlan.map(step => ({ ...step, status: 'pending' }));
    setWorkflow(initialWorkflow);
    setIsExecuting(true);
    track('execution_terminal_workflow_started', { toolCount: initialWorkflow.length });

    const runStep = (index: number) => {
      if (index >= initialWorkflow.length) {
        setIsExecuting(false);
        toast({ title: 'Execution Complete!', description: 'The creative workflow has finished successfully.' });
        track('execution_terminal_workflow_completed');
        return;
      }

      setWorkflow(prev => prev.map((step, i) => i === index ? { ...step, status: 'running' } : step));

      setTimeout(() => {
        setWorkflow(prev => prev.map((step, i) => i === index ? { ...step, status: 'completed' } : step));
        runStep(index + 1);
      }, 1200 + Math.random() * 800);
    };

    runStep(0);
  };

  const getStatusIcon = (status: Status) => {
    switch (status) {
      case 'running': return <Loader2 className="h-5 w-5 animate-spin text-primary" />;
      case 'completed': return <CheckCircle className="h-5 w-5 text-green-500" />;
      default: return <Circle className="h-5 w-5 text-muted-foreground/50" />;
    }
  };

  return (
    <main className="p-4 md:p-10 space-y-8">
      <PageHeader
        title="Creative Execution Terminal"
        description="The engine for your creative tasks. Paste a plan from a tool like the PDF Editor and watch the AI work."
        icon={<Sparkles className="h-8 w-8" />}
      />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-1 space-y-6 sticky top-24">
          <Card>
            <CardHeader>
              <CardTitle>Execution Plan</CardTitle>
              <CardDescription>Paste the plan generated by another tool.</CardDescription>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder='Paste your execution plan JSON here...'
                value={pastedPlan}
                onChange={(e) => setPastedPlan(e.target.value)}
                rows={10}
                className="font-mono text-xs"
                disabled={isExecuting}
              />
            </CardContent>
            <CardFooter>
              <Button onClick={handleRunWorkflow} disabled={isExecuting || !pastedPlan} className="w-full">
                {isExecuting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Play className="mr-2 h-4 w-4" />}
                {isExecuting ? 'Executing...' : 'Run Workflow'}
              </Button>
            </CardFooter>
          </Card>
        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Execution Progress</CardTitle>
              <CardDescription>Follow the AI as it executes each step of your plan.</CardDescription>
            </CardHeader>
            <CardContent>
              {workflow.length > 0 ? (
                <div className="space-y-6">
                  {workflow.map((step, index) => (
                    <div key={index} className="flex items-start gap-4">
                      <div>{getStatusIcon(step.status)}</div>
                      <div className="flex-1">
                        <p className={cn("font-medium", step.status !== 'pending' && "text-foreground")}>
                          Step {index + 1}: {step.description}
                        </p>
                        <p className="text-sm text-muted-foreground">
                          Tool: <code className="font-mono text-xs bg-muted px-1 py-0.5 rounded">{step.tool}</code>
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-64 border-dashed border-2 rounded-lg text-center p-6">
                  <ClipboardPaste className="h-12 w-12 text-muted-foreground/50 mb-4" />
                  <h3 className="text-lg font-semibold text-foreground">Waiting for a plan</h3>
                  <p className="text-muted-foreground">Paste an execution plan on the left to begin.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </main>
  );
}
